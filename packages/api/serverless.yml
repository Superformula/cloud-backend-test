service: sf-api

frameworkVersion: ">=1.1.0 <=2.4.0"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region, 'eu-central-1'}
  config: ${file(./environment/${opt:stage, self:provider.stage}.js)}
  dynamodb:
    stages:
      - dev
    start:
      port: 8100
      inMemory: true
      migrate: true
      seed: true
      noStart: false
    seed:
      dev:
        sources:
          - table: Users
            sources: [seed/Users.json]
  dynamodbStream:
    stages:
      - dev
    host: localhost
    port: 8100
    region: ${self:custom.region}
    pollForever: true
    streams:
      - table: Events
        functions:
          - dynamoDBStreamHandler
  serverless-offline:
    useChildProcesses: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - graphql
        - graphql-subscriptions
        - graphql-tag
      nodeModulesRelativeDir: '../../'
    excludeFiles: src/**/__test__/**/*.test.ts

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    MAP_BOX_ACCESS_TOKEN: ${self:custom.config.MAP_BOX_ACCESS_TOKEN}
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
      Resource: !GetAtt UsersDynamoDBTable.Arn
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 'arn:aws:execute-api:*:*:*/development/POST/@connections/*'
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: !GetAtt ConnectionsDynamoDBTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: !GetAtt EventsDynamoDBTable.StreamArn
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt EventsDynamoDBTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: !GetAtt SubscriptionsDynamoDBTable.Arn
    - Effect: Allow
      Action:
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: !GetAtt SubscriptionOperationsDynamoDBTable.Arn

functions:
  httpHandler:
    handler: src/index.handleHttp
    events:
      - http:
          path: /
          method: any
          cors: true
  webSocketHandler:
    handler: src/index.handleWebSocket
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  dynamoDBStreamHandler:
    handler: src/index.handleDynamoDBStream
    events:
      - stream:
          enabled: true
          type: dynamodb
          arn:
            Fn::GetAtt: [EventsDynamoDBTable, StreamArn]

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: Users
    ConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBConnectionManager
        TableName: Connections
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          # connection id
          - AttributeName: id
            KeyType: HASH
        # This one is optional (all subscription operations have 2 hours of lifetime in ttl field but enabling TTL is up to you)
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    SubscriptionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBSubscriptionManager
        TableName: Subscriptions
        AttributeDefinitions:
          - AttributeName: event
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: event
            KeyType: HASH
          - AttributeName: subscriptionId
            KeyType: RANGE
        # This one is optional (all subscription operations have 2 hours of lifetime in ttl field but enabling TTL is up to you)
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    SubscriptionOperationsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBSubscriptionManager
        TableName: SubscriptionOperations
        AttributeDefinitions:
          - AttributeName: subscriptionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: subscriptionId
            KeyType: HASH
        # This one is optional (all subscription operations have 2 hours of lifetime in ttl field but enabling TTL is up to you)
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    EventsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # see DynamoDBEventStore
        TableName: Events
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # see ISubscriptionEvent
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        # This one is optional (all subscription operations have 2 hours of lifetime in ttl field but enabling TTL is up to you)
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

