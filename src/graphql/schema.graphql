type User {
  id: ID!
  name: String!
  dob: AWSDate
  address: String
  description: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  imageUrl: AWSURL
}
"""
Input schema when creating a new user
"""
input UserInput {
  id: ID
  name: String!
  dob: AWSDate
  address: String
  description: String
  imageUrl: AWSURL
}
"""
Input schema when updating an user
"""
input UserUpdateInput {
  id: ID!
  name: String
  dob: AWSDate
  address: String
  description: String
  imageUrl: AWSURL
}
type PaginatedUsers {
  items: [User!]
  nextToken: String
}
type Location {
  coordinates: [Float]
}
type Query {
  listUsers(limit: Int, nextToken: String): PaginatedUsers!
  getUser(id: ID!): User
  getLocation(address: String!): Location
}
type Mutation {
  createUser(user: UserInput!): User
  updateUser(user: UserUpdateInput!): User
  deleteUser(id: ID!): User
}
type Subscription {
  userUpdated: User @aws_subscribe(mutations: ["createUser", "deleteUser", "updateUser"])
}
type Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
